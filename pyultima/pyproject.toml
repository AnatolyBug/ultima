[build-system]
requires = ["maturin>=0.14,<0.15"]
build-backend = "maturin"

[project]
name = "ultima"
dependencies = [
  "typing_extensions >= 4.0.0; python_version <= '3.11'",
  "polars",
  "pyarrow"
]
requires-python = ">=3.9"
classifiers = [
    "Programming Language :: Rust",
    "Programming Language :: Python :: Implementation :: CPython",
    "Programming Language :: Python :: Implementation :: PyPy",
]

[tool.ruff]
line-length = 88
# Assume Python 3.9 
# Not everyone yet upgraded to newest
target-version = "py39"

[tool.isort]
profile = "black"

[tool.mypy]
files = ["ultima", "tests"]
namespace_packages = true
show_error_codes = true
strict = true
enable_error_code = [
  "redundant-expr",
  "truthy-bool",
  "ignore-without-code",
]
disable_error_code = [
  "empty-body",
]

[[tool.mypy.overrides]]
module = [
  "pyarrow.*",
  "ultima.rust_module.ultima_pyengine",
]
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = ["ultima.*"]
# We exclude the ultima module from warn_return_any, because the PyO3 api does not have Python
# type annotations. See https://github.com/PyO3/pyo3/issues/1112 for a discussion on adding
# this capability. We could add a stub file for ultima.rust_module.ultima_pyengine (the PyO3 api), but that
# amounts to duplicating almost all type annotations on our api, as the Python api itself is a
# thin wrapper around the PyO3 api to start with.
warn_return_any = false



